diff --git a/app/config/security.yml b/app/config/security.yml
index cf82573..89cd6e6 100644
--- a/app/config/security.yml
+++ b/app/config/security.yml
@@ -25,8 +25,12 @@ security:
             remember_me:
                 secret: '%secret%'
 
-            form_login:
-                csrf_token_generator: security.csrf.token_manager
+            guard:
+                authenticators:
+                    - app.security.login_form_authenticator
+
+#            form_login:
+#                csrf_token_generator: security.csrf.token_manager
 
     access_control:
         - { path: ^/admin, roles: ROLE_USER }
diff --git a/app/config/services.yml b/app/config/services.yml
index 153b708..da0098b 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -25,3 +25,7 @@ services:
         autowire: true
         tags:
             - { name: kernel.event_subscriber }
+
+    app.security.login_form_authenticator:
+        class: AppBundle\Security\LoginFormAuthenticator
+        autowire: true
diff --git a/src/AppBundle/Security/LoginFormAuthenticator.php b/src/AppBundle/Security/LoginFormAuthenticator.php
new file mode 100644
index 0000000..78b7809
--- /dev/null
+++ b/src/AppBundle/Security/LoginFormAuthenticator.php
@@ -0,0 +1,102 @@
+<?php
+
+namespace AppBundle\Security;
+
+use Doctrine\ORM\EntityManager;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\Routing\RouterInterface;
+use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
+use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
+use Symfony\Component\Security\Core\Security;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoder;
+use Symfony\Component\Security\Core\User\UserInterface;
+use Symfony\Component\Security\Core\User\UserProviderInterface;
+use Symfony\Component\Security\Csrf\CsrfToken;
+use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
+use Symfony\Component\Security\Guard\Authenticator\AbstractFormLoginAuthenticator;
+use Symfony\Component\Security\Http\Util\TargetPathTrait;
+
+class LoginFormAuthenticator extends AbstractFormLoginAuthenticator
+{
+    use TargetPathTrait;
+
+    private $em;
+    private $router;
+    private $passwordEncoder;
+    private $csrfTokenManager;
+
+    public function __construct(EntityManager $em, RouterInterface $router, UserPasswordEncoder $passwordEncoder, CsrfTokenManagerInterface $csrfTokenManager)
+    {
+        $this->em = $em;
+        $this->router = $router;
+        $this->passwordEncoder = $passwordEncoder;
+        $this->csrfTokenManager = $csrfTokenManager;
+    }
+
+    public function getCredentials(Request $request)
+    {
+        $isLoginSubmit = $request->getPathInfo() == '/login_check' && $request->isMethod('POST');
+        if (!$isLoginSubmit) {
+            // skip authentication
+            return;
+        }
+
+        $username = $request->request->get('_username');
+        $password = $request->request->get('_password');
+        $csrfToken = $request->request->get('_csrf_token');
+
+        if (false === $this->csrfTokenManager->isTokenValid(new CsrfToken('authenticate', $csrfToken))) {
+            throw new InvalidCsrfTokenException('Invalid CSRF token.');
+        }
+
+        $request->getSession()->set(
+            Security::LAST_USERNAME,
+            $username
+        );
+
+        return [
+            'username' => $username,
+            'password' => $password,
+        ];
+    }
+
+    public function getUser($credentials, UserProviderInterface $userProvider)
+    {
+        $username = $credentials['username'];
+
+        return $this->em->getRepository('AppBundle:User')
+            ->findOneBy(['email' => $username]);
+    }
+
+    public function checkCredentials($credentials, UserInterface $user)
+    {
+        $password = $credentials['password'];
+
+        if ($this->passwordEncoder->isPasswordValid($user, $password)) {
+            return true;
+        }
+
+        return false;
+    }
+
+    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
+    {
+        $targetPath = null;
+
+        // if the user hit a secure page and start() was called, this was
+        // the URL they were on, and probably where you want to redirect to
+        $targetPath = $this->getTargetPath($request->getSession(), $providerKey);
+
+        if (!$targetPath) {
+            $targetPath = $this->router->generate('homepage');
+        }
+
+        return new RedirectResponse($targetPath);
+    }
+
+    protected function getLoginUrl()
+    {
+        return $this->router->generate('fos_user_security_login');
+    }
+}
